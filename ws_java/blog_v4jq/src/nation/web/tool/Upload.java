package nation.web.tool;

import java.io.File; 
import java.util.Enumeration; 
import java.util.HashMap; 
import java.util.Iterator; 
import java.util.Map; 
 
import javax.servlet.http.HttpServletRequest; 
import javax.servlet.http.HttpServletRequestWrapper; 
 
// apache 파일 업로드 컴포넌트
import org.apache.commons.fileupload.DiskFileUpload; 
import org.apache.commons.fileupload.FileItem; 
import org.apache.commons.fileupload.FileUpload; 
import org.apache.commons.fileupload.FileUploadException; 
 
// 상속과 Servlet 알아야 
// HttpServletRequestWrapper: 기존의 Request 객체의 기능을 확장
// Integer도 Wrapper클래스(메소드를 가짐) 
// int는 순수한 숫자
/** 
 * HttpServletRequestWrapper 클래스는 HttpServletRequest 
 * 인터페이스를 임시로 구현한 클래스로 개발자가 내부객체인 
 * request를 사용하지않고 새로운 형태로 request 객체를 
 * 만들어 사용할 경우 상속받는 클래스입니다.   
 * Apahce FileUpload 콤포넌트를 사용하기 편리하게 지원합니다. 
 * FileUpload API를 사용하는 HttpServletRequestWrapper 클래스로서 
 * HttpServletRequest에 기반한 API를 사용하기 위한 래퍼이다. 
 */ 
public class Upload extends HttpServletRequestWrapper { 
      
    private boolean multipart = false; 
     
    private HashMap parameterMap;  // 일반 <INPUT> 폼태그 
    private HashMap fileItemMap;   // 전송된 <FILE> 태그 객체가 저장 
     
    /** 
     * 생성자 
     * @param request 
     * @throws FileUploadException 
     */ 
    public Upload(HttpServletRequest request)  
    throws FileUploadException{ 
        this(request, -1, -1, null); // 현재 클래스의 생성자 호출, this: 4개의 인수를 전달 (-1: 무제한)
    } 
     
    /** 
     * 생성자 
     * @param request HttpServletRequest 객체 
     * @param threshold 메모리에 저장할 최대크기 
     * @param max 업로드할 최대 파일크기 
     * @param repositoryPath 업로드 경로 
     * @throws FileUploadException 
     */ 
    public Upload(HttpServletRequest request, 
        int threshold, int max, String repositoryPath) throws FileUploadException { 
        super(request); 
         
        parsing(request, threshold, max, repositoryPath); 
    } 
     
    /** 
     * 일반 입력 필드와 파일 필드를 MAP(key, value를 가지는 구조)에 저장 
     * @param request HttpServletRequest 객체 
     * @param threshold 메모리에 저장할 최대크기 
     * @param max 업로드할 최대 파일크기 
     * @param repositoryPath 업로드 경로 
     * @throws FileUploadException 
     */ 
    private void parsing(HttpServletRequest request, 
        int threshold, int max, String repositoryPath) throws FileUploadException { 
         
        if (FileUpload.isMultipartContent(request)) { 
            multipart = true; 
             
            parameterMap = new java.util.HashMap(); 
            fileItemMap = new java.util.HashMap(); 
             
            DiskFileUpload diskFileUpload = new DiskFileUpload(); 
            if (threshold != -1) { 
                diskFileUpload.setSizeThreshold(threshold); 
            } 
            diskFileUpload.setSizeMax(max); 
            if (repositoryPath != null) { 
                diskFileUpload.setRepositoryPath(repositoryPath); 
            } 
             
            java.util.List list = diskFileUpload.parseRequest(request); 
            for (int i = 0 ; i < list.size() ; i++) { 
                FileItem fileItem = (FileItem) list.get(i); 
                String name = fileItem.getFieldName(); 
 
                
                // 파일인지 아닌지 찾음
                if (fileItem.isFormField()) { // 일반 폼 태그인지 검사 
                    // 일반 폼태그라면 처리 
                    String value = fileItem.getString(); 
                    String[] values = (String[]) parameterMap.get(name); 
                    if (values == null) { 
                        values = new String[] { value }; 
                    } else { 
                        String[] tempValues = new String[values.length + 1]; 
                        System.arraycopy(values, 0, tempValues, 0, 1); 
                        tempValues[tempValues.length - 1] = value; 
                        values = tempValues; 
                    } 
                    parameterMap.put(name, values); 
                } else { // 파일 태그라면 처리 ; 파일인지 아닌지 찾음
                    System.out.println("파일 태그 발견됨 태그명: " + name); 
                    System.out.println("파일 태그 발견됨 파일명: " + fileItem.getName()); 
                    fileItemMap.put(name, fileItem); 
                } 
            } 
            addTo(); // request 속성으로 설정한다. 
        } 
    } 
     
    /** 
     * 파일을 전송하는 enctype="multipart/form-data"인경우 true리턴 
     * @return enctype="multipart/form-data"인경우 true리턴 
     */ 
    public boolean isMultipartContent() { 
        return multipart; 
    } 
     
    /** 
     * 주어진 파라미터에 대한 값을 리턴 
     */ 
    public String getParameter(String name) { 
        if (multipart) { 
            String[] values = (String[])parameterMap.get(name); 
            if (values == null) return null; 
            return values[0]; 
        } else 
            return super.getParameter(name); 
    } 
     
    /** 
     * 파라미터의 값들을 리턴 
     */ 
    public String[] getParameterValues(String name) { 
        if (multipart) 
            return (String[])parameterMap.get(name); 
        else 
            return super.getParameterValues(name); 
    } 
     
    /** 
     * 전체 파라미터의 이름을 리턴 
     */ 
    public Enumeration getParameterNames() { 
        if (multipart) { 
            return new Enumeration() { 
                Iterator iter = parameterMap.keySet().iterator(); 
                 
                public boolean hasMoreElements() { 
                    return iter.hasNext(); 
                } 
                public Object nextElement() { 
                    return iter.next(); 
                } 
            }; 
        } else { 
            return super.getParameterNames(); 
        } 
    } 
     
    public Map getParameterMap() { 
        if (multipart) 
            return parameterMap; 
        else 
            return super.getParameterMap(); 
    } 
     
    /** 
     * 지정한 파라미터 이름과 관련된 FileItem을 리턴합니다. 
     * @param name 
     * @return 
     */ 
    public FileItem getFileItem(String name) { 
        if (multipart) 
            return (FileItem) fileItemMap.get(name); 
        else 
            return null; 
    } 
     
    /** 
     * 임시로 사용된 업로드 파일을 삭제합니다. 
     */ 
    public void delete() { 
        if (multipart) { 
            Iterator fileItemIter = fileItemMap.values().iterator(); 
            while( fileItemIter.hasNext()) { 
                FileItem fileItem = (FileItem)fileItemIter.next(); 
                fileItem.delete(); 
            } 
        } 
    } 
     
    /** 
     * 래퍼객체 자체를 request 객체에 저장합니다. 
     */ 
    public void addTo() { 
        super.setAttribute(Upload.class.getName(), this); 
    } 
     
    /** 
     * request 속성에 저장된 FileUploadRequestWrapper를 리턴합니다. 
     * @param request 
     * @return 
     */ 
    public Upload  
                  getFrom(HttpServletRequest request) { 
        return (Upload) 
            request.getAttribute(Upload.class.getName()); 
    } 
     
    /** 
     * 지정한 request가 래퍼를 속성으로 포함하고 있으면 true를 리턴합니다. 
     * @param request 
     * @return 
     */ 
    public boolean hasWrapper(HttpServletRequest request) { 
        if (getFrom(request) == null) { 
            return false; 
        } else { 
            return true; 
        } 
    } 
     
    /** 
     * 서버에 올라온 파일을 서버의 디스크에 저장 
     * 파일명 처리: data.txt -> 0_data.txt -> 1_data.txt -> 2_data.txt -> ... 
     * @param fileItem 저장할 파일 객체 
     * @param upDir 저장할 서버의 폴더 
     * @return 저장된 파일명 
     */ 
    public String saveFile(FileItem fileItem, String upDir){ 
         
        String filename = "";       //업로드 파일명 
        
        // 파일 태그 
        System.out.println("전송된 파일명: " + fileItem.getName()); 
 
        // 폴더 구분자 추출 
        int idx = fileItem.getName().lastIndexOf("\\"); //윈도우 기반 
 
        if (idx == -1) { // 유닉스, 리눅스 기반 
            idx = fileItem.getName().lastIndexOf("/"); 
        } 
           
        // 순수 파일명 추출, C:/bigdata1/gallery/winter.jpg -> winter.jpg 
        filename = fileItem.getName().substring(idx + 1); 
           
        try { 
            //--------------------------------------------------------- 
            // 대상 폴더에 저장할 파일 객체 생성, 폴더 + 파일명 
            //--------------------------------------------------------- 
            File uploadedFile = new File(upDir, filename); 
               
            //올릴려는 파일과 같은 이름이 존재하면 중복파일 처리 
            if ( uploadedFile.exists() == true ){ 
                for(int k=0; true; k++){ 
                    //파일명 중복을 피하기 위한 일련 번호를 생성하여 
                    //파일명으로 조합 
                    uploadedFile = new File(upDir, k + "_" +filename); 
                    //조합된 파일명이 존재한다면 중복됨으로 일련번호가 
                    //붙은 파일명 다시 생성 
                    
                    // !을 이용해 false일 경우 참으로 처리되도록 변환 
                    if(!(uploadedFile.exists())){ // true -> false, false -> true  
                        // filename = k + "_" +filename; 
                        filename = uploadedFile.getName();
                        break; 
                    } else {
                      // System.out.println(uploadedFile.getName() + " 파일이 존재합니다.");
                    }
                } 
            } 
                
            // storage 폴더에 파일명 저장 
            fileItem.write(uploadedFile); 
        } catch(Exception e) { 
              System.out.println(e.toString());     
        } 
 
        return filename; // 업로드된 파일명 리턴 
    } 
    //--------------------------------------------------------------- 
    //Fileupload 콤포넌트 관련 코드 끝 
    //--------------------------------------------------------------- 
 
 
    /**  
     * 파일을 삭제합니다.  
    */ 
    public boolean deleteFile(String folder, String fileName){ 
        boolean ret = false; 
         
        try{ 
            if ( fileName != null){ // 기존에 파일이 존재하는 경우 삭제 
                File file = new File(folder + "/" + fileName); 
                if (file.exists()){
                  ret = file.delete();
                }
            } 
        }catch(Exception e){ 
            e.printStackTrace(); 
        } 
         
        return ret; 
    } 
 
    public HashMap getFileItemMap() { 
        return fileItemMap; 
    } 
 
    public void setFileItemMap(HashMap fileItemMap) { 
        this.fileItemMap = fileItemMap; 
    } 
     
    /** 
     * 전송받은 파일의 갯수를 리턴 
     * @return 
     */ 
    public int getFileCount(){ 
        return this.fileItemMap.size(); 
    } 
    
    /**
     * FileUpload 1.2, 1.3 한글 변환(파일 업로드할 때는 이런 절차가 추가적으로 필요함)
     * @param str
     * @return
     */
    public String toKor(String str) {
      String corean = null;
      try {
        // ISO-8859-1: 영문 문자셋
        corean = new String(str.getBytes("ISO-8859-1"), "UTF-8"); // 1바이트짜리를 2바이트로 문자열 변환, 복호화
        // corean= new String(str.getBytes("ISO-8859-1"), "KSC5601"); // 10년 전
        // corean= new String(str.getBytes("ISO-8859-1"), "euc-kr"); // 몇년 전까지
      } catch (Exception e) {
        e.printStackTrace();
      }
      return corean;
    }
    
} 